#!/usr/bin/env node
/*!
 * ShortUrl
 * Copyright(c) 2015 Andrew Shapro
 * MIT Licensed
 */

/**
 * Module dependencies.
 */
require('babel-polyfill');
const app = require('../lib/index').default;
const debug = require('debug')('api');
const http = require('http');

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Get port from environment and store in Express.
 */
const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */
const server = http.createServer(app);

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  let bind = typeof port === 'string' ? 'Pipe' : 'Port';
  bind = `${bind} ${port}`;
  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(`${bind} requires elevated privileges`);
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(`${bind} is already in use`);
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
  let bind = typeof port === 'string' ? 'Pipe' : 'Port';
  bind = `${bind} ${port}`;
  debug(`Listening on ${bind}`);
}


/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port, process.env.HOST || '127.0.0.1');
server.on('error', onError);
server.on('listening', onListening);
